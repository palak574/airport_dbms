USE airport_db;
SHOW TABLES;
SELECT * FROM airports2 LIMIT 5;

-- problem statement 1 
SELECT 
  Origin_airport,
  Destination_airport,
  SUM(passengers) AS total_passengers
FROM airports2
GROUP BY 
  Origin_airport,
  Destination_airport
ORDER BY total_passengers DESC;

-- problem statement 2
SELECT
  Origin_airport,
  Destination_airport,
  AVG(CAST(Passengers AS FLOAT)/NULLIF(Seats,0))*100 AS avg_seat_uti
FROM airports2
GROUP BY
  Origin_airport,
  Destination_airport
ORDER BY avg_seat_uti DESC;

-- problem statement 3 
select 
Origin_airport , Destination_airport , sum(Passengers) total_passengers
from airports2
group by Origin_airport, Destination_airport
order by total_passengers desc
limit 3;

-- problem statement 4
select Origin_city, 
count(Flights) total_flights , 
sum(Passengers) total_passengers
from airports2
group by Origin_city
order by  total_passengers desc;

-- problem statement 5 
select Origin_airport,
sum(Distance) total_distance
from airports2
group by Origin_airport
order by  total_distance desc;

-- problem statement 6
select 
year(Fly_date) year,
month(Fly_date) month,
count(Flights) total_flights,
sum(passengers) as total_passengers,
avg(Distance) avg_distance
from airports2
group by year,month
order by year desc, month desc;

-- problem statement 7 
select 
Origin_airport, Destination_airport,
sum(Seats) total_seats,
sum(Passengers) as total_passengers,
(sum(Passengers) *1.0/nullif(sum(Seats),0)) as passenger_to_seat_ratio,
avg(Distance) avg_distance
from airports2
group by Origin_airport, Destination_airport
having passenger_to_seat_ratio<0.5
order by passenger_to_seat_ratio;


-- problem statement 8
select 
Origin_airport,
count(Flights) as total_flights
from airports2
group by Origin_airport
order by total_flights desc
limit 3;

-- problem statement 9 
select 
Origin_city,
count(Flights) as total_flights,
sum(Passengers) as total_passengers
from airports2
where Destination_city = "bend, or" and 
origin_city<>"bend, or"
group by Origin_city
order by total_flights desc
limit 3;

-- problem statement 10 
select 
Origin_airport, Destination_airport,
max(distance) long_distance
from airports2
group by Origin_airport ,Destination_airport;

-- problem statement 11
with monthly_flights as (select month(fly_date) month,
count(flights) total_flights
from airports2
group by month(fly_date))
select
month, total_flights,
case 
when total_flights = (select max(total_flights) from monthly_flights) then 'most busy'
when total_flights = (select min(total_flights) from monthly_flights) then 'least busy'
else null
end as status
from monthly_flights
where 
total_flights = (select max(total_flights) from monthly_flights) or 
total_flights = (select min(total_flights) from monthly_flights);

-- problem statement 12
with passenger_summary as 
(select origin_airport,destination_airport,
year(fly_date) as year ,
sum(passengers) total_passengers
from airports2
group by origin_airport,destination_airport,
year(fly_date)),
passenger_growth as 
(select origin_airport, destination_airport,year,total_passengers,
lag(total_passengers) over (partition by origin_airport order by year) as prev_yr_passenger
from passenger_summary)
select 
 origin_airport, destination_airport,year,total_passengers,
 case 
 when prev_yr_passenger is not null then
 ((total_passengers - prev_yr_passenger)*100.0/nullif(prev_yr_passenger,0))
 end as growth_percentage
from passenger_growth
order by 
origin_airport,destination_airport,year;

--  problem statement 13
with flight_summary as
(select 
Origin_airport, Destination_airport, year(fly_date) year , count(flights) total_flights
from airports2
group by Origin_airport, Destination_airport, year(fly_date)),
flight_growth as
(select 
Origin_airport, Destination_airport,year ,total_flights,
lag(total_flights) over (partition by Origin_airport , destination_airport order by year) as previous_year_flights
from flight_summary),
growth_rate as 
(select origin_airport, destination_airport, year, total_flights,
case 
when previous_year_flights is not null and previous_year_flights >0 then
(( total_flights - previous_year_flights)*100.0/previous_year_flights)
else null
end as growth_rate,
case when previous_year_flights is not null and total_flights > previous_year_flights then 1 
else 0
end as growth_indicator
from flight_growth)
select origin_airport , destination_airport ,
min(growth_rate) as min_growth_rate,
max(growth_rate) as max_growth_rate
from growth_rate
where growth_indicator =1
group by origin_airport , destination_airport
having min(growth_indicator)=1
order by origin_airport, destination_airport;

-- problem statement 14
with utilization_ration as 
(select 
origin_airport, sum(passengers) total_passengers, sum(seats) total_seats, count(flights) total_flights,
sum(passengers)*1.0/sum(seats) passengers_seat_ratio
from airports2
group by origin_airport),
weighted_utilization as
(select 
origin_airport, total_passengers, total_seats, total_flights, passengers_seat_ratio,
(passengers_seat_ratio * total_flights)/sum(total_flights) over () as weighted_utilization
from utilization_ration)
select
origin_airport, total_passengers, total_seats, total_flights,weighted_utilization 
from weighted_utilization
order by weighted_utilization desc 
limit 3;

-- problem statement 15
WITH monthly_passenger_count AS (
  SELECT 
    origin_city,
    YEAR(fly_date) AS year,
    MONTH(fly_date) AS month,
    SUM(passengers) AS total_passengers
  FROM airports2
  GROUP BY 
    origin_city,
    YEAR(fly_date),
    MONTH(fly_date)
),
max_passenger_per_city AS (
  SELECT 
    origin_city,
    MAX(total_passengers) AS peak_passengers
  FROM monthly_passenger_count
  GROUP BY 
    origin_city
)
SELECT 
  mpc.origin_city,
  mpc.year,
  mpc.month,
  mpc.total_passengers
FROM monthly_passenger_count mpc
JOIN max_passenger_per_city mp
  ON mpc.origin_city = mp.origin_city
 AND mpc.total_passengers = mp.peak_passengers
ORDER BY 
  mpc.origin_city,
  mpc.year,
  mpc.month
limit 3;

-- problem statement 16
WITH yearly_passenger_count AS (
  SELECT
    origin_airport,
    destination_airport,
    YEAR(fly_date) AS year,
    SUM(passengers) AS total_passenger
  FROM airports2
  GROUP BY 
    origin_airport,
    destination_airport,
    YEAR(fly_date)
),
yearly_decline AS (
  SELECT
    y1.origin_airport,
    y1.destination_airport,
    y1.year AS year1,
    y1.total_passenger AS passenger_year1,
    y2.year AS year2,
    y2.total_passenger AS passenger_year2,
    ((y2.total_passenger - y1.total_passenger)/NULLIF(y1.total_passenger,0))*100 AS percentage_change
  FROM yearly_passenger_count y1
  JOIN yearly_passenger_count y2 
    ON y1.origin_airport = y2.origin_airport
   AND y1.destination_airport = y2.destination_airport
   AND y1.year = y2.year + 1
)
SELECT 
  origin_airport,
  destination_airport,
  year1,
  passenger_year1,
  year2,
  passenger_year2,
  percentage_change
FROM yearly_decline
WHERE percentage_change < 0
ORDER BY percentage_change
LIMIT 5;

-- problem statement 17
with flight_stats as(select  
origin_airport ,  destination_airport, count(flights) as total_flights ,
sum(passengers) total_passengers,
sum(seats) total_seats,
(sum(passengers)/nullif(sum(seats),0)) avg_seat_utilization
from airports2
group by origin_airport,destination_airport)
select 
origin_airport ,  destination_airport, total_flights ,
 total_passengers,
 total_seats,
round((avg_seat_utilization *100),2) as avg_seat_utilization_percentage
from flight_stats
where 
total_flights >=10 and 
 round((avg_seat_utilization *100),2) <50
 order by  avg_seat_utilization_percentage;
 
 -- problem statment 18
 with distance_stat as
 (select
  Origin_city,
  Destination_city,
  AVG(Distance) as avg_flight_distance
FROM airports2
GROUP BY
  Origin_city,
  Destination_city)
  select
  origin_city, destination_city, round(avg_flight_distance,2) as avg_flight_distance
  from distance_stat
  order by
  avg_flight_distance desc;
  
 -- problem statement 19
 with yearly_summary as
 (select
 year(fly_date) year,
 count(flights) total_flights,
 sum(passengers) total_passengers
 from airports2
 group by year),
 yearly_growth as
 (select 
 year, total_flights,total_passengers,lag(total_flights) over (order by  year) as prev_flights,
 lag(total_passengers) over (order by year) as prev_passengers
 from yearly_summary)
 select 
 total_flights , total_passengers,
 round((total_flights - prev_flights)/nullif(prev_flights,0)*100) as flights_growth_percentage,
 round((total_passengers - prev_passengers)/nullif(prev_passengers,0)*100) as passenger_growth_percentage
 from yearly_growth
 order by year;
 
 -- problem statement 20
 with route_distance as
 (select
 origin_airport, destination_airport,sum(flights) total_flights,
 sum(distance) total_distance
 from airports2
 group by origin_airport,destination_airport),
 weighted_route as 
 (select 
 origin_airport, destination_airport, total_flights,total_distance,(total_distance*total_flights) as weighted_distance
 from route_distance)
 select 
 origin_airport, destination_airport, total_flights,total_distance, weighted_distance
 from weighted_route
 order by weighted_distance desc
 limit 3;
